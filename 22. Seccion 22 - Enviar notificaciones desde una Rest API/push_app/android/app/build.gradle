plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    //* NOTA: Para el cambio del paquete seguimos el tutorial en el cual instalamos un paquete de Flutter que nos permite hacer el cambio 
    //*       de una forma fácil y rápida. El enlace es https://pub.dev/packages/change_app_package_name
    namespace "com.the_alchemist.push_app"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        //* NOTA: Para el cambio del paquete seguimos el tutorial en el cual instalamos un paquete de Flutter que nos permite hacer el cambio 
        //*       de una forma fácil y rápida. El enlace es https://pub.dev/packages/change_app_package_name
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.the_alchemist.push_app"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        // NOTA: Firebase nos pide que la versión de SDK mínimo que usemos sea la 19 por lo tanto cambiamos acá y colocamos esa versión
        //       OJO Adicionalmente si tuvieramos una app donde tuvieramos dos paquetes pidiera el SDK mínimo diferente por ejemplo uni
        //       que pidiera que el mínimo fuera 19 y el otro que fuera el 20, entonces lo que vamos a hacer es irnos por el mínimo más
        //       alto, es decir, usariamos el 20
        //minSdkVersion flutter.minSdkVersion
        minSdkVersion 19
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {}
